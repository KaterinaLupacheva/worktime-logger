{"version":3,"sources":["utils.js","App.js","reportWebVitals.js","index.js"],"names":["numberToHoursAndMins","number","hours","Math","trunc","mins","round","floor","calculateTotalMonthTime","arr","totalTime","forEach","el","getRandomElement","min","max","random","createTotalRow","weekStartIdx","times","id","rate","i","timesCopy","weekTimeNumber","slice","totalWeekTime","date","time","moneyTotal","formStyle","display","flexWrap","justifyContent","textFieldStyle","margin","App","useState","startDate","setStartDate","endDate","setEndDate","sum","setSum","setRate","tableRows","setTableRows","getBusinessdays","dates","filter","getDay","Container","maxWidth","style","backgroundColor","Paper","elevation","padding","marginBottom","noValidate","onSubmit","e","preventDefault","days","differenceInBusinessDays","Date","timeToLog","timeArray","push","createDaylyTime","calculatedTime","newArr","Number","toFixed","randomIndex","length","checkTimeSum","eachDayOfInterval","start","end","workingDates","result","toDateString","createTableData","TextField","label","type","value","onChange","target","InputLabelProps","shrink","variant","Button","color","disabled","data","autoHeight","pageSize","rows","columns","field","headerName","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa1514de.chunk.js","sourcesContent":["export const numberToHoursAndMins = (number) => {\r\n  const hours = Math.trunc(number);\r\n  const mins = Math.round(((number - Math.floor(number)) * 60) / 10) * 10;\r\n  return { hours, mins };\r\n};\r\n\r\nconst hoursAndMinsToNumber = (hours, mins) => {\r\n  return hours + mins / 60;\r\n};\r\n\r\nexport const createDaylyTime = (time, days) => {\r\n  let arr = [];\r\n  for (let i = 0; i < days; i++) {\r\n    arr.push(time);\r\n  }\r\n  return arr;\r\n};\r\n\r\nexport const calculateTotalMonthTime = (arr) => {\r\n  let totalTime = 0;\r\n  arr.forEach((el) => (totalTime += hoursAndMinsToNumber(el.hours, el.mins)));\r\n  return totalTime;\r\n};\r\n\r\nexport const checkTimeSum = (timeToLog, calculatedTime, arr) => {\r\n  let time = calculatedTime;\r\n  let newArr = [...arr];\r\n  while (Number(time).toFixed(2) !== Number(timeToLog).toFixed(2)) {\r\n    if (timeToLog < time) {\r\n      let randomIndex = getRandomElement(0, newArr.length - 1);\r\n      newArr[randomIndex] = {\r\n        ...newArr[randomIndex],\r\n        mins: newArr[randomIndex].mins - 10,\r\n      };\r\n      time = calculateTotalMonthTime(newArr);\r\n    } else if (timeToLog > time) {\r\n      let randomIndex = getRandomElement(0, newArr.length - 1);\r\n      newArr[randomIndex] = {\r\n        ...newArr[randomIndex],\r\n        mins: newArr[randomIndex].mins + 10,\r\n      };\r\n      time = calculateTotalMonthTime(newArr);\r\n    }\r\n  }\r\n  return newArr;\r\n};\r\n\r\nconst getRandomElement = (min, max) =>\r\n  Math.floor(Math.random() * (max - min)) + min;\r\n\r\nexport const createTableData = (dates, times, rate) => {\r\n  let result = [];\r\n  let id = 0;\r\n  let weekStartIdx = 0;\r\n  for (let i = 0; i < dates.length; i++) {\r\n    result.push({\r\n      id: id,\r\n      date: dates[i].toDateString(),\r\n      time: `${times[i].hours} h, ${times[i].mins} min`,\r\n    });\r\n    id++;\r\n\r\n    //total row for week\r\n    if (dates[i].getDay() === 5) {\r\n      result.push(createTotalRow(weekStartIdx, times, id, rate, i));\r\n      weekStartIdx = i + 1;\r\n      id++;\r\n    }\r\n\r\n    //total row for the last week\r\n    if (i === dates.length - 1 && dates[i].getDay() !== 5) {\r\n      result.push(createTotalRow(weekStartIdx, times, id, rate, i));\r\n      id++;\r\n    }\r\n  }\r\n  const totalTime = numberToHoursAndMins(calculateTotalMonthTime(times));\r\n  result.push({\r\n    id: id,\r\n    date: \"Total\",\r\n    time: `${totalTime.hours} h, ${totalTime.mins} min`,\r\n    moneyTotal: Math.round(calculateTotalMonthTime(times) * rate),\r\n  });\r\n  return result;\r\n};\r\n\r\nconst createTotalRow = (weekStartIdx, times, id, rate, i) => {\r\n  const timesCopy = [...times];\r\n  const weekTimeNumber = calculateTotalMonthTime(\r\n    timesCopy.slice(weekStartIdx, i + 1)\r\n  );\r\n  const totalWeekTime = numberToHoursAndMins(weekTimeNumber);\r\n  return {\r\n    id: id,\r\n    date: \"Week total\",\r\n    time: `${totalWeekTime.hours} h, ${totalWeekTime.mins} min`,\r\n    moneyTotal: Math.round(weekTimeNumber * rate),\r\n  };\r\n};\r\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport { Container, Paper, TextField, Button } from \"@material-ui/core\";\nimport differenceInBusinessDays from \"date-fns/differenceInBusinessDays\";\nimport eachDayOfInterval from \"date-fns/eachDayOfInterval\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport { CSVLink, CSVDownload } from \"react-csv\";\nimport {\n  numberToHoursAndMins,\n  createDaylyTime,\n  calculateTotalMonthTime,\n  checkTimeSum,\n  createTableData,\n} from \"./utils\";\n\nconst formStyle = {\n  display: \"flex\",\n  flexWrap: \"wrap\",\n  justifyContent: \"space-evenly\",\n};\n\nconst textFieldStyle = {\n  margin: \"20px\",\n};\n\nfunction App() {\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const [sum, setSum] = useState(0);\n  const [rate, setRate] = useState(0);\n  const [tableRows, setTableRows] = useState([]);\n\n  const columns = [\n    { field: \"date\", headerName: \"Date\", width: 300 },\n    { field: \"time\", headerName: \"Time\", width: 150 },\n    { field: \"moneyTotal\", headerName: \"Total Earnings\", width: 150 },\n  ];\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const days =\n      differenceInBusinessDays(new Date(endDate), new Date(startDate)) + 1;\n    const timeToLog = sum / rate;\n    const hoursPerDay = timeToLog / days;\n    const hoursAndMinsPerDay = numberToHoursAndMins(hoursPerDay);\n    const timeArray = createDaylyTime(hoursAndMinsPerDay, days);\n    const totalTime = calculateTotalMonthTime(timeArray);\n\n    const times = checkTimeSum(timeToLog, totalTime, timeArray);\n\n    const dates = eachDayOfInterval({\n      start: new Date(startDate),\n      end: new Date(endDate),\n    });\n    const workingDates = getBusinessdays(dates);\n\n    setTableRows(createTableData(workingDates, times, rate));\n  };\n\n  const getBusinessdays = (dates) => {\n    return dates.filter((date) => date.getDay() !== 6 && date.getDay() !== 0);\n  };\n\n  return (\n    <Container maxWidth=\"md\" style={{ backgroundColor: \"#d3f5e7\" }}>\n      <Paper elevation={5} style={{ padding: \"5vh\", marginBottom: \"3rem\" }}>\n        <form style={formStyle} noValidate onSubmit={onSubmit}>\n          <TextField\n            id=\"date\"\n            label=\"Start date\"\n            type=\"date\"\n            value={startDate}\n            onChange={(e) => setStartDate(e.target.value)}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            style={textFieldStyle}\n          />\n          <TextField\n            id=\"date\"\n            label=\"End date\"\n            type=\"date\"\n            value={endDate}\n            onChange={(e) => setEndDate(e.target.value)}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            style={textFieldStyle}\n          />\n          <TextField\n            id=\"filled-number\"\n            label=\"Sum\"\n            type=\"number\"\n            value={sum}\n            onChange={(e) => setSum(e.target.value)}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            variant=\"outlined\"\n            style={textFieldStyle}\n          />\n          <TextField\n            id=\"filled-number\"\n            label=\"Rate\"\n            type=\"number\"\n            value={rate}\n            onChange={(e) => setRate(e.target.value)}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            variant=\"outlined\"\n            style={textFieldStyle}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            style={textFieldStyle}\n          >\n            Calculate\n          </Button>\n          <Button variant=\"contained\" color=\"secondary\" style={textFieldStyle} disabled={tableRows.length > 0 ? false : true}>\n            <CSVLink style={{ color: \"white\" }} data={tableRows}>\n              Download CSV\n            </CSVLink>\n          </Button>\n        </form>\n      </Paper>\n      <DataGrid autoHeight pageSize={40} rows={tableRows} columns={columns} />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}